-- primeiro exercício
DELIMITER //
CREATE PROCEDURE sp_ListarAutores()
BEGIN
	SELECT Nome, Sobrenome
    FROM Autor;
END;
//
DELIMITER ;

CALL sp_ListarAutores();


-- segundo exercício
DELIMITER //
CREATE PROCEDURE sp_LivrosPorCategoria(IN nome_categoria VARCHAR(50))
BEGIN
	SELECT l.Titulo, c.Nome AS Categoria
    FROM Livro l
    INNER JOIN Categoria c ON l.Categoria_ID = c.Categoria_ID
    WHERE c.Nome = nome_categoria;
END;
//
DELIMITER ;

CALL sp_LivrosPorCategoria('Romance');


-- terceiro exercício
DELIMITER //
CREATE PROCEDURE sp_ContarLivrosPorCategoria(IN nome_categoria VARCHAR(50))
BEGIN
	SELECT c.Nome, COUNT(l.Titulo) AS quantidade_livros
    FROM Livro l
    INNER JOIN Categoria c ON l.Categoria_ID = c.Categoria_ID
    WHERE c.Nome = nome_categoria
    GROUP BY c.Nome;
END;
//
DELIMITER ;

CALL sp_ContarLivrosPorCategoria('História');

-- quarto exercício
DELIMITER //
CREATE PROCEDURE sp_VerificarLivrosCategoria(IN nome_categoria VARCHAR(50), OUT possui_livros ENUM('possui', 'não possui'))
BEGIN
    DECLARE quantidade_livros INT;

	SELECT COUNT(l.Categoria_ID) AS quantidade_livros
    INTO quantidade_livros
    FROM Categoria c
    INNER JOIN Livro l ON c.Categoria_ID = l.Categoria_ID
    WHERE c.Nome = nome_categoria
    GROUP BY c.Nome;
   
    IF quantidade_livros > 0 THEN
		SET possui_livros = 'possui';
	ELSE
		SET possui_livros = 'não possui';
	END IF;
END;
//
DELIMITER ;

CALL sp_VerificarLivrosCategoria('Romance', @possui_livros);
SELECT @possui_livros;

-- quinto exercício
DELIMITER //
CREATE PROCEDURE sp_LivrosAteAno(IN ano INT)
BEGIN
	SELECT l.Titulo, l.Ano_Publicacao
	FROM Livro l
	WHERE l.Ano_Publicacao < ano
END;
//
DELIMITER ;

CALL sp_LivrosAteAno(2010);

-- sexto exercício
DELIMITER //
CREATE PROCEDURE sp_TitulosPorCategoria(IN nome_categoria VARCHAR(50))
BEGIN
	SELECT l.Titulo
    FROM Livro l
    INNER JOIN Categoria c ON l.Categoria_ID = c.Categoria_ID
    WHERE c.Nome = nome_categoria;
END;
//
DELIMITER ;

CALL sp_TitulosPorCategoria('História');


-- sétimo exercício 
DELIMITER //
CREATE PROCEDURE sp_AdicionarLivro(IN nome_livro VARCHAR(80))
BEGIN
	DECLARE por_livros INT;
   
    SELECT l.Livro_ID 
    INTO por_livros
    FROM Livro l
    WHERE l.Titulo = nome_livro;
    
    IF por_livros IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Livro existente.';
	ELSE
		INSERT INTO Livro (Titulo)
		VALUES (nome_livro);
	END IF;
END;
//
DELIMITER ;

CALL sp_AdicionarLivro('As Vantagens de Ser Invisível');
SELECT l.Titulo FROM Livro l;


-- oitavo exercício
DELIMITER //
CREATE PROCEDURE sp_autorAntigo()
BEGIN
	SELECT Nome, Sobrenome
    FROM Autor
    WHERE Data_Nascimento = (
		SELECT MIN(Data_Nascimento)
        FROM Autor
	);
END;
//
DELIMITER ;

CALL sp_autorAntigo();


-- nono exercício
DELIMITER //
CREATE PROCEDURE sp_ListarAutores()
BEGIN
	SELECT Nome, Sobrenome
    FROM Autor;
END;
//
DELIMITER ;

-- DELIMITER // : cria um delimitador temporário que vc pode utilizar qualquer símbolo.
-- CREATE PROCEDURE sp_ListarAutores() : cria a stored procedure.
-- BEGIN: inicia o bloco da stored procedure.
-- SELECT Nome, Sobrenome FROM Autor : seleciona a coluna nome e sobrenome da tabela autor.
-- END : encerra o bloco da stored procedure.
-- DELIMITER ; : fecha o delimitador com o padrão que é o símbolo ponto e vírgula.
-- CALL sp_ListarAutores(); : chama a procedure e devolve o resultado do select.


-- décimo exercício
DELIMITER //
CREATE PROCEDURE sp_LivrosESeusAutores()
BEGIN
	SELECT l.Titulo, a.Nome, a.Sobrenome
    FROM Livro l
    INNER JOIN Autor_Livro ON l.Livro_ID = Autor_Livro.Livro_ID
    INNER JOIN Autor a ON a.Autor_ID = Autor_Livro.Autor_ID;
END;
//
DELIMITER ;

CALL sp_LivrosESeusAutores();
